<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[mybatis加载和执行]]></title>
    <url>%2F2019%2F07%2F06%2Fmybatis%E5%8A%A0%E8%BD%BD%E5%92%8C%E6%89%A7%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[mybatis是如何加载和执行的？ MapperScannerConfigurer这是一个BeanFactoryPostProcessor, 会在spring ApplicationContext refresh早期被加载。 invokeBeanFactoryPostProcessors(beanFactory); 这个过程会扫描配置的mapper interface package, 并且将些interface加入需要实例化的bean中。123456789101112131415161718192021222324/** * &#123;@inheritDoc&#125; * * @since 1.0.2 */@Overridepublic void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) &#123; if (this.processPropertyPlaceHolders) &#123; processPropertyPlaceHolders(); &#125; ClassPathMapperScanner scanner = new ClassPathMapperScanner(registry); scanner.setAddToConfig(this.addToConfig); scanner.setAnnotationClass(this.annotationClass); scanner.setMarkerInterface(this.markerInterface); scanner.setSqlSessionFactory(this.sqlSessionFactory); scanner.setSqlSessionTemplate(this.sqlSessionTemplate); scanner.setSqlSessionFactoryBeanName(this.sqlSessionFactoryBeanName); scanner.setSqlSessionTemplateBeanName(this.sqlSessionTemplateBeanName); scanner.setResourceLoader(this.applicationContext); scanner.setBeanNameGenerator(this.nameGenerator); scanner.registerFilters(); scanner.scan(StringUtils.tokenizeToStringArray(this.basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS));&#125; MapperFactoryBean属性在实例化这些Mapper Interface的时候, 其实是实例化MapperFactoryBean的过程。在这个过程中, sqlSession会被注入。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182/** * Populate the bean instance in the given BeanWrapper with the property values * from the bean definition. * @param beanName the name of the bean * @param mbd the bean definition for the bean * @param bw BeanWrapper with bean instance */ protected void populateBean(String beanName, RootBeanDefinition mbd, BeanWrapper bw) &#123; PropertyValues pvs = mbd.getPropertyValues(); if (bw == null) &#123; if (!pvs.isEmpty()) &#123; throw new BeanCreationException( mbd.getResourceDescription(), beanName, "Cannot apply property values to null instance"); &#125; else &#123; // Skip property population phase for null instance. return; &#125; &#125; // Give any InstantiationAwareBeanPostProcessors the opportunity to modify the // state of the bean before properties are set. This can be used, for example, // to support styles of field injection. boolean continueWithPropertyPopulation = true; if (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123; for (BeanPostProcessor bp : getBeanPostProcessors()) &#123; if (bp instanceof InstantiationAwareBeanPostProcessor) &#123; InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp; if (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123; continueWithPropertyPopulation = false; break; &#125; &#125; &#125; &#125; if (!continueWithPropertyPopulation) &#123; return; &#125; if (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME || mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123; MutablePropertyValues newPvs = new MutablePropertyValues(pvs); // Add property values based on autowire by name if applicable. if (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME) &#123; autowireByName(beanName, mbd, bw, newPvs); &#125; // Add property values based on autowire by type if applicable. if (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123; autowireByType(beanName, mbd, bw, newPvs); &#125; pvs = newPvs; &#125; boolean hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors(); boolean needsDepCheck = (mbd.getDependencyCheck() != RootBeanDefinition.DEPENDENCY_CHECK_NONE); if (hasInstAwareBpps || needsDepCheck) &#123; PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching); if (hasInstAwareBpps) &#123; for (BeanPostProcessor bp : getBeanPostProcessors()) &#123; if (bp instanceof InstantiationAwareBeanPostProcessor) &#123; InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp; pvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName); if (pvs == null) &#123; return; &#125; &#125; &#125; &#125; if (needsDepCheck) &#123; checkDependencies(beanName, mbd, filteredPds, pvs); &#125; &#125; applyPropertyValues(beanName, mbd, bw, pvs); &#125; 在此处, 进行MapperFactoryBean实例化的过程中, 需要将BeanDefinition中的PropertyValues取出来进行注入, 其中就将sqlSession注入了。 SqlSessionFactoryBean这个bean是需要我们在spring xml配置中进行设置。123456789101112/** * &#123;@inheritDoc&#125; */@Overridepublic void afterPropertiesSet() throws Exception &#123; notNull(dataSource, "Property 'dataSource' is required"); notNull(sqlSessionFactoryBuilder, "Property 'sqlSessionFactoryBuilder' is required"); state((configuration == null &amp;&amp; configLocation == null) || !(configuration != null &amp;&amp; configLocation != null), "Property 'configuration' and 'configLocation' can not specified with together"); this.sqlSessionFactory = buildSqlSessionFactory();&#125; 其中的mapperLocations是我们配置的mapper xml package的位置, 根据这个配置, SqlSessionFactoryBean会将这些Mapper.xml通过XMLMapperBuilder解析。 1234567891011public void parse() &#123; if (!configuration.isResourceLoaded(resource)) &#123; configurationElement(parser.evalNode(&quot;/mapper&quot;)); configuration.addLoadedResource(resource); bindMapperForNamespace(); &#125; parsePendingResultMaps(); parsePendingChacheRefs(); parsePendingStatements();&#125; bindMapperForNamespace这里就是我们平常在xml中配置的namespace绑定, 这个namespace就是我们制定的mapper.xml对应的mapper interface。 可以看到, 多个xml绑定了同一个namespace的时候, 并不会多次重复绑定。1234567891011121314151617181920private void bindMapperForNamespace() &#123; String namespace = builderAssistant.getCurrentNamespace(); if (namespace != null) &#123; Class&lt;?&gt; boundType = null; try &#123; boundType = Resources.classForName(namespace); &#125; catch (ClassNotFoundException e) &#123; //ignore, bound type is not required &#125; if (boundType != null) &#123; if (!configuration.hasMapper(boundType)) &#123; // Spring may not know the real resource name so we set a flag // to prevent loading again this resource from the mapper interface // look at MapperAnnotationBuilder#loadXmlResource configuration.addLoadedResource("namespace:" + namespace); configuration.addMapper(boundType); &#125; &#125; &#125;&#125; parsePendingResultMaps解析resultMap parsePendingChacheRefs解析cache 配置 parsePendingStatements解析sql语句 包括增删改查和配置的等。 校验 mybatis允许一个Mapper Interface对应多个Mapper xml。 条件: mybatis会将所有的resultMaps和MappedStatement等都放在Configuration中, 由Configuration自行实现的StrictMap储存。 map的key为namespace + id, 当存在相同的key时, put时候会抛出异常。 123456789101112131415161718192021protected static class StrictMap&lt;V&gt; extends HashMap&lt;String, V&gt; &#123; private static final long serialVersionUID = -4950446264854982944L; private final String name; @SuppressWarnings("unchecked") public V put(String key, V value) &#123; if (containsKey(key)) &#123; throw new IllegalArgumentException(name + " already contains value for " + key); &#125; if (key.contains(".")) &#123; final String shortKey = getShortName(key); if (super.get(shortKey) == null) &#123; super.put(shortKey, value); &#125; else &#123; super.put(shortKey, (V) new Ambiguity(shortKey)); &#125; &#125; return super.put(key, value); &#125;&#125; MapperProxyFactoryMapperProxyFactory使用JDK动态代理。12345678protected T newInstance(MapperProxy&lt;T&gt; mapperProxy) &#123; return (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), new Class[] &#123; mapperInterface &#125;, mapperProxy);&#125;public T newInstance(SqlSession sqlSession) &#123; final MapperProxy&lt;T&gt; mapperProxy = new MapperProxy&lt;T&gt;(sqlSession, mapperInterface, methodCache); return newInstance(mapperProxy);&#125; MapperProxy实例化Mapper对象在每个bean需要注入的时候通过populateBean实例化并且注入到响应的bean中。 由于Mapper对象在BeanFactory中实际上是MapperFactoryBean。所以最终会通过MapperFactoryBean中的 123public T getObject() throws Exception &#123; return this.getSqlSession().getMapper(this.mapperInterface);&#125; 方法获取。 此时的sqlSession是在之前实例化MapperFactoryBean的时候，通过PropertyValues中属性注入的方式已经注入了。 之后的调用栈是 SqlSessionTemplate123public &lt;T&gt; T getMapper(Class&lt;T&gt; type) &#123; return this.getConfiguration().getMapper(type, this);&#125; Configuration123public &lt;T&gt; T getMapper(Class&lt;T&gt; type, SqlSession sqlSession) &#123; return mapperRegistry.getMapper(type, sqlSession);&#125; MapperRegistry1234567891011public &lt;T&gt; T getMapper(Class&lt;T&gt; type, SqlSession sqlSession) &#123; final MapperProxyFactory&lt;T&gt; mapperProxyFactory = (MapperProxyFactory&lt;T&gt;) knownMappers.get(type); if (mapperProxyFactory == null) &#123; throw new BindingException(&quot;Type &quot; + type + &quot; is not known to the MapperRegistry.&quot;); &#125; try &#123; return mapperProxyFactory.newInstance(sqlSession); &#125; catch (Exception e) &#123; throw new BindingException(&quot;Error getting mapper instance. Cause: &quot; + e, e); &#125;&#125; 最终产生MapperProxy对象，完成之后，将mapper真正对应的mapperProxy对象注入到刚才需要populateBean的bean中。 调用mapper实际的调用其实是对mapperProxy的调用。 1234567891011121314@Overridepublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; try &#123; if (Object.class.equals(method.getDeclaringClass())) &#123; return method.invoke(this, args); &#125; else if (isDefaultMethod(method)) &#123; return invokeDefaultMethod(proxy, method, args); &#125; &#125; catch (Throwable t) &#123; throw ExceptionUtil.unwrapThrowable(t); &#125; final MapperMethod mapperMethod = cachedMapperMethod(method); return mapperMethod.execute(sqlSession, args);&#125; 在执行调用的sql的executor也是代理，实际上是一个Plugin对象。最终的调用是调用Plugin中的invoke方法。 123456789101112@Overridepublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; try &#123; Set&lt;Method&gt; methods = signatureMap.get(method.getDeclaringClass()); if (methods != null &amp;&amp; methods.contains(method)) &#123; return interceptor.intercept(new Invocation(target, method, args)); &#125; return method.invoke(target, args); &#125; catch (Exception e) &#123; throw ExceptionUtil.unwrapThrowable(e); &#125;&#125; 在这里调用invoke的时候，会执行在该plugin中的interceptors。也就是我们mybatis支持的拦截器，这里的拦截器是Executor拦截器，也是就我们声明的 1@Intercepts(&#123; @Signature(type = ResultSetHandler.class, method = &quot;handleResultSets&quot;, args = &#123;Statement.class&#125;) &#125;) 我们也可以声明ResultSetHandler类型的拦截器，这个是作用于处理返回结果集的拦截器。 1@Intercepts(&#123; @Signature(type = ResultSetHandler.class, method = &quot;handleResultSets&quot;, args = &#123;Statement.class&#125;) &#125;) ResultSetHandler的处理是在如下两个方法中发生的。 123456@Overridepublic &lt;E&gt; List&lt;E&gt; query(Statement statement, ResultHandler resultHandler) throws SQLException &#123; PreparedStatement ps = (PreparedStatement) statement; ps.execute(); return resultSetHandler.&lt;E&gt; handleResultSets(ps);&#125; 123456789101112@Overridepublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; try &#123; Set&lt;Method&gt; methods = signatureMap.get(method.getDeclaringClass()); if (methods != null &amp;&amp; methods.contains(method)) &#123; return interceptor.intercept(new Invocation(target, method, args)); &#125; return method.invoke(target, args); &#125; catch (Exception e) &#123; throw ExceptionUtil.unwrapThrowable(e); &#125;&#125;]]></content>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Optional]]></title>
    <url>%2F2019%2F07%2F01%2FOptional-md%2F</url>
    <content type="text"><![CDATA[Optional的一些实践 returning value with get()结论：不要使用 Optional的本意是让我们去避免一些出乎意料的异常，如果使用get()就违背了Optional设计的初衷，很可能get()方法会在将来的release中deprecated掉，所以最好使用其他的方式来让我们更好地去控制null case。 orElse()和orElseGet()区别结论：使用orElseGet() orElse接收一个value orElseGet接收一个Supplier 最主要的区别： 123456789101112131415161718public static String getMyDefault() &#123; System.out.println(&quot;Getting Default Value&quot;); return &quot;Default Value&quot;;&#125;public static void main(String[] args) &#123; String text = &quot;Text present&quot;; System.out.println(&quot;Using orElseGet:&quot;); String defaultText = Optional.ofNullable(text).orElseGet(HashMapTest::getMyDefault); Assert.check(&quot;Text present&quot;.equals(defaultText)); System.out.println(&quot;Using orElse:&quot;); defaultText = Optional.ofNullable(text).orElse(getMyDefault()); Assert.check(&quot;Text present&quot;.equals(defaultText));&#125; 返回结果 123Using orElseGet:Using orElse:Getting Default Value 可以明显地看出来使用orElse即使前面的条件没有为空，他还是调用了orElse里面的方法，而orElseGet不会。orElseGet源码明显地表示了如果value的值为null，就会调用入参Supplier的get方法取value。 stream().findFirst().orElseGet()findFirst()返回的是一个Optional对象，但是在调用orElseGet()的时候，会返回Optional的value对象。 orElseThrow()throw出来的exception必须是 Runtime Exception 方法上显示声明会抛出的Exception]]></content>
      <categories>
        <category>java</category>
        <category>java8</category>
      </categories>
      <tags>
        <tag>Optinal</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jackson-basic]]></title>
    <url>%2F2019%2F07%2F01%2Fjackson-basic-md%2F</url>
    <content type="text"><![CDATA[jackson序列化 所有jackson使用基本都是对ObjectMapper。1ObjectMapper mapper = new ObjectMapper(); object-&gt;json1mapper.writeValueAsString(result1); json-&gt;object1mapper.readValue(Jsonparser, Class&lt;T&gt;) serialize and deserialize12@JsonDeserialize(using = LocalDateTimeDeserializer.class)@JsonSerialize(using = LocalDateTimeSerializer.class) timeFormat123@JsonDeserialize(using = LocalDateTimeDeserializer.class)@JsonSerialize(using = LocalDateTimeSerializer.class)@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;) json list to list12URL path = ListTest.class.getClassLoader().getResource(&quot;before.json&quot;);List&lt;Rel&gt; ll = mapper.readValue(path, new TypeReference&lt;List&lt;Rel&gt;&gt;()&#123;&#125;); https://www.baeldung.com/jackson-object-mapper-tutorial jackson wrapper json result12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364@JsonInclude(JsonInclude.Include.NON_NULL)public class JsonResult&lt;T&gt; implements Serializable&#123; private T data; private int status; private String msg; @JsonCreator public JsonResult(@JsonProperty("status") int status, @JsonProperty("msg") String msg, @JsonProperty("data") T data)&#123; this.data = data; this.msg = msg; this.status = status; &#125; @JsonCreator JsonResult(@JsonProperty("status") int status)&#123; this.status = status; &#125; @JsonCreator JsonResult(@JsonProperty("status") int status, @JsonProperty("msg") String msg)&#123; this.status = status; this.msg = msg; &#125; @JsonCreator JsonResult(@JsonProperty("status") int status, @JsonProperty("data") T data)&#123; this.status = status; this.data = data; &#125; @JsonCreator JsonResult(@JsonProperty("data") T data)&#123; this.data = data; &#125; public T getData() &#123; return data; &#125; public int getStatus() &#123; return status; &#125; public String getMsg() &#123; return msg; &#125; public static &lt;T&gt; JsonResult&lt;T&gt; error(int status, String msg)&#123; return new JsonResult&lt;&gt;(status, msg); &#125; public static &lt;T&gt; JsonResult&lt;T&gt; create(int status)&#123; return new JsonResult&lt;&gt;(status); &#125; public static &lt;T&gt; JsonResult&lt;T&gt; create(T data)&#123; return new JsonResult&lt;&gt;(data); &#125; public static &lt;T&gt; JsonResult&lt;T&gt; success(T data)&#123; return new JsonResult&lt;&gt;(0, data); &#125; json 自定义LocalDateTime序列化器配置joda 时间的返回类型123456789public class HHMMTimeSerializer extends JsonSerializer&lt;LocalDateTime&gt; &#123; private static final DateTimeFormatter HHMM_FORMATTER = DateTimeFormat.forPattern("HH:mm"); @Override public void serialize(LocalDateTime value, JsonGenerator gen, SerializerProvider serializers) throws IOException, JsonProcessingException &#123; gen.writeString(value != null ? HHMM_FORMATTER.print(value) : "null"); &#125;&#125; 使用 1@JsonSerialize(using = HHMMTimeSerializer.class)]]></content>
      <tags>
        <tag>java</tag>
        <tag>jackson</tag>
        <tag>序列化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring Servlet ApplicationContext启动]]></title>
    <url>%2F2019%2F07%2F01%2Fspring-Servlet-ApplicationContext%E5%90%AF%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[spring Servlet ApplicationContext怎么启动? web.xml中DispatcherServlet配置123456789&lt;servlet&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; With the above Servlet configuration in place, you will need to have a file called /WEB-INF/golfing- servlet.xml in your application; this file will contain all of your Spring Web MVC-specific components (beans). You can change the exact location of this configuration file through a Servlet initialization parameter (see below for details). 使用servlet-mapping中的servlet-name必须与servlet中的servlet-name一致，并且必须要在WEB-INF中配置一个${servlet-name}-servlet.xml的配置文件, 该配置文件包含了所有的Spring Web MVC定制的bean。 当然, 你也可以通过Servlet init-param来修改配置文件xml的路径。 MVC servlet的模型DispatcherServlet的上下文 Servlet WebApplicationContext Root WebApplicationContext 其中Servlet WebApplicationContext包含了Controller、view resolver 等等与MVC相关的beans。 ==如果在处理过程中Servlet WebApplicationContext找不到相关的beans, 则会委托给Root WebApplicationContext处理。== 通过下面的配置可以使Servlet WebApplicationContext为空, 全部由RootApplicationContext处理12345678910111213141516171819202122&lt;web-app&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;/WEB-INF/root-context.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;servlet&gt; &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt;&lt;/web-app&gt; FrameworkServlet.initServletBeanTomcat中 initServlet(servlet)触发了Servlet的init再触发HttpServletBean的initServletBean最终触发FrameworkServlet的initServletBean。 12345678910111213141516171819202122232425262728293031/** * Overridden method of &#123;@link HttpServletBean&#125;, invoked after any bean properties * have been set. Creates this servlet's WebApplicationContext. */@Overrideprotected final void initServletBean() throws ServletException &#123; getServletContext().log("Initializing Spring FrameworkServlet '" + getServletName() + "'"); if (this.logger.isInfoEnabled()) &#123; this.logger.info("FrameworkServlet '" + getServletName() + "': initialization started"); &#125; long startTime = System.currentTimeMillis(); try &#123; this.webApplicationContext = initWebApplicationContext(); initFrameworkServlet(); &#125; catch (ServletException ex) &#123; this.logger.error("Context initialization failed", ex); throw ex; &#125; catch (RuntimeException ex) &#123; this.logger.error("Context initialization failed", ex); throw ex; &#125; if (this.logger.isInfoEnabled()) &#123; long elapsedTime = System.currentTimeMillis() - startTime; this.logger.info("FrameworkServlet '" + getServletName() + "': initialization completed in " + elapsedTime + " ms"); &#125;&#125; initWebApplicationContext其中initWebApplicationContext就是用来实例化Servlet ApplicationContext。 onRefresh刷新ApplicationContext, 其中initHandlerMappings和initHandlerAdapters。这两个初始化非常重要。HandlerMappings是用来处理请求的核心。123456789101112131415/** * Initialize the strategy objects that this servlet uses. * &lt;p&gt;May be overridden in subclasses in order to initialize further strategy objects. */protected void initStrategies(ApplicationContext context) &#123; initMultipartResolver(context); initLocaleResolver(context); initThemeResolver(context); initHandlerMappings(context); initHandlerAdapters(context); initHandlerExceptionResolvers(context); initRequestToViewNameTranslator(context); initViewResolvers(context); initFlashMapManager(context);&#125; initHandlerMappings这个initHandlerMappings至少会实例化一个。 12345678910111213141516171819202122232425262728293031323334353637/** * Initialize the HandlerMappings used by this class. * &lt;p&gt;If no HandlerMapping beans are defined in the BeanFactory for this namespace, * we default to BeanNameUrlHandlerMapping. */private void initHandlerMappings(ApplicationContext context) &#123; this.handlerMappings = null; if (this.detectAllHandlerMappings) &#123; // Find all HandlerMappings in the ApplicationContext, including ancestor contexts. Map&lt;String, HandlerMapping&gt; matchingBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, true, false); if (!matchingBeans.isEmpty()) &#123; this.handlerMappings = new ArrayList&lt;HandlerMapping&gt;(matchingBeans.values()); // We keep HandlerMappings in sorted order. AnnotationAwareOrderComparator.sort(this.handlerMappings); &#125; &#125; else &#123; try &#123; HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class); this.handlerMappings = Collections.singletonList(hm); &#125; catch (NoSuchBeanDefinitionException ex) &#123; // Ignore, we'll add a default HandlerMapping later. &#125; &#125; // Ensure we have at least one HandlerMapping, by registering // a default HandlerMapping if no other mappings are found. if (this.handlerMappings == null) &#123; this.handlerMappings = getDefaultStrategies(context, HandlerMapping.class); if (logger.isDebugEnabled()) &#123; logger.debug("No HandlerMappings found in servlet '" + getServletName() + "': using default"); &#125; &#125;&#125; 其中会递归地去把所有的父BeanFactory中的HandlerMapping实例化。这里也解释了为什么我们可以不配置Servlet ApplicationContext。因为最终它的parent ApplicationContext中的HandlerMapping都会被实例化。 12345678910111213141516171819202122public static &lt;T&gt; Map&lt;String, T&gt; beansOfTypeIncludingAncestors( ListableBeanFactory lbf, Class&lt;T&gt; type, boolean includeNonSingletons, boolean allowEagerInit) throws BeansException &#123; Assert.notNull(lbf, "ListableBeanFactory must not be null"); Map&lt;String, T&gt; result = new LinkedHashMap&lt;String, T&gt;(4); result.putAll(lbf.getBeansOfType(type, includeNonSingletons, allowEagerInit)); if (lbf instanceof HierarchicalBeanFactory) &#123; HierarchicalBeanFactory hbf = (HierarchicalBeanFactory) lbf; if (hbf.getParentBeanFactory() instanceof ListableBeanFactory) &#123; Map&lt;String, T&gt; parentResult = beansOfTypeIncludingAncestors( (ListableBeanFactory) hbf.getParentBeanFactory(), type, includeNonSingletons, allowEagerInit); for (Map.Entry&lt;String, T&gt; entry : parentResult.entrySet()) &#123; String beanName = entry.getKey(); if (!result.containsKey(beanName) &amp;&amp; !hbf.containsLocalBean(beanName)) &#123; result.put(beanName, entry.getValue()); &#125; &#125; &#125; &#125; return result;&#125; initHandlerAdapters基本等同initHandlerMappings]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>spring启动</tag>
        <tag>ApplicationContext</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring-Root-ApplicationContext启动]]></title>
    <url>%2F2019%2F07%2F01%2Fspring-Root-ApplicationContext%E5%90%AF%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[spring Root ApplicationContext容器怎么启动? web.xml的解析 WEB-INF/web.xml 1234567891011121314151617181920212223242526272829303132333435363738&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"&gt; &lt;display-name&gt;ripple-flow-order&lt;/display-name&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring-config.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;servlet&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;filter&gt; &lt;filter-name&gt;requestLog&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt; &lt;async-supported&gt;true&lt;/async-supported&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;requestLog&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt;&lt;/web-app&gt; web.xml的解析发生在tomcat中, tomcat 中的1org.apache.tomcat.util.descriptor.web.WebXml 解析后的web.xml对象。 当容器启动之后, 会触发容器启动的的listener执行。 web.xml中的listener org.apache.catalina.core.StandardContext#listenerStart 其中配置的listener会被tomcat解析，并且tomcat会将其加入到tomcat启动的listener中。 ContextLoaderListener实现了ServletContextListener接口, 所以在tomcat启动之后, 会执行ContextLoaderListener的contextInitialized方法 123456789/** ** Notification that the web application initialization ** process is starting. ** All ServletContextListeners are notified of context ** initialization before any filter or servlet in the web ** application is initialized. */ public void contextInitialized ( ServletContextEvent sce ); ContextLoaderListener初始化1234567/** * Initialize the root web application context. */@Overridepublic void contextInitialized(ServletContextEvent event) &#123; initWebApplicationContext(event.getServletContext());&#125; ContextLoaderListener进行初始化的过程是初始化root web application context的过程。这个过程读取的配置信息是在web.xml中的context-param 1234&lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring-config.xml&lt;/param-value&gt;&lt;/context-param&gt; 配置并刷新根上下文 org.springframework.web.context.ContextLoader#configureAndRefreshWebApplicationContext org.springframework.context.support.AbstractApplicationContext#refresh AbstractApplicationContext中的refresh方法是每个ApplicationContext都需要执行的用来刷新上下文配置的方法。 1. prepareRefresh设置一些基本的环境信息,应用中无法拿到一些系统的环境配置, 需要从tomcat给的ServletContext中取。 2. obtainFreshBeanFactory让子类实例化Application Context中的bean factory。 12345678910111213141516171819202122/** * Loads the bean definitions via an XmlBeanDefinitionReader. * @see org.springframework.beans.factory.xml.XmlBeanDefinitionReader * @see #initBeanDefinitionReader * @see #loadBeanDefinitions */@Overrideprotected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException &#123; // Create a new XmlBeanDefinitionReader for the given BeanFactory. XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory); // Configure the bean definition reader with this context's // resource loading environment. beanDefinitionReader.setEnvironment(getEnvironment()); beanDefinitionReader.setResourceLoader(this); beanDefinitionReader.setEntityResolver(new ResourceEntityResolver(this)); // Allow a subclass to provide custom initialization of the reader, // then proceed with actually loading the bean definitions. initBeanDefinitionReader(beanDefinitionReader); loadBeanDefinitions(beanDefinitionReader);&#125; 在这个过程中, 生成bean factory的时候需要加载BeanDefinitions, 是由XmlWebApplicationContext进行。这个过程是把所有的在xml中配置的, 包括component-scan等都会注册成bean。 1org.springframework.beans.factory.xml.XmlBeanDefinitionReader#registerBeanDefinitions 3. prepareBeanFactory配置一些BeanPostProcessor和一些不需要自动注入的类, 这些类会在spring的上下文加载完成之后自动地去通知处理。(Aware类型) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748/** * Configure the factory's standard context characteristics, * such as the context's ClassLoader and post-processors. * @param beanFactory the BeanFactory to configure */protected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) &#123; // Tell the internal bean factory to use the context's class loader etc. beanFactory.setBeanClassLoader(getClassLoader()); beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader())); beanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment())); // Configure the bean factory with context callbacks. beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this)); beanFactory.ignoreDependencyInterface(EnvironmentAware.class); beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class); beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class); beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class); beanFactory.ignoreDependencyInterface(MessageSourceAware.class); beanFactory.ignoreDependencyInterface(ApplicationContextAware.class); // BeanFactory interface not registered as resolvable type in a plain factory. // MessageSource registered (and found for autowiring) as a bean. beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory); beanFactory.registerResolvableDependency(ResourceLoader.class, this); beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this); beanFactory.registerResolvableDependency(ApplicationContext.class, this); // Register early post-processor for detecting inner beans as ApplicationListeners. beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this)); // Detect a LoadTimeWeaver and prepare for weaving, if found. if (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123; beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory)); // Set a temporary ClassLoader for type matching. beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader())); &#125; // Register default environment beans. if (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123; beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment()); &#125; if (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123; beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties()); &#125; if (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123; beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment()); &#125;&#125; 4. postProcessBeanFactory从servletContext中取一些环境or系统信息注册。 注册request/session scopes。123456789101112/** * Register request/session scopes, a &#123;@link ServletContextAwareProcessor&#125;, etc. */@Overrideprotected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) &#123; beanFactory.addBeanPostProcessor(new ServletContextAwareProcessor(this.servletContext, this.servletConfig)); beanFactory.ignoreDependencyInterface(ServletContextAware.class); beanFactory.ignoreDependencyInterface(ServletConfigAware.class); WebApplicationContextUtils.registerWebApplicationScopes(beanFactory, this.servletContext); WebApplicationContextUtils.registerEnvironmentBeans(beanFactory, this.servletContext, this.servletConfig);&#125; 5. invokeBeanFactoryPostProcessors执行BeanFactoryPostProcessor。 123456789101112131415/** * Instantiate and invoke all registered BeanFactoryPostProcessor beans, * respecting explicit order if given. * &lt;p&gt;Must be called before singleton instantiation. */protected void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory) &#123; PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors()); // Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime // (e.g. through an @Bean method registered by ConfigurationClassPostProcessor) if (beanFactory.getTempClassLoader() == null &amp;&amp; beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123; beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory)); beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader())); &#125;&#125; Mybatis-config.xml中配置的MapperScannerConfigurer会在这里处理。 这里的scanner.scan方法是核心. 123456789101112131415161718192021222324/** * &#123;@inheritDoc&#125; * * @since 1.0.2 */@Overridepublic void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) &#123; if (this.processPropertyPlaceHolders) &#123; processPropertyPlaceHolders(); &#125; ClassPathMapperScanner scanner = new ClassPathMapperScanner(registry); scanner.setAddToConfig(this.addToConfig); scanner.setAnnotationClass(this.annotationClass); scanner.setMarkerInterface(this.markerInterface); scanner.setSqlSessionFactory(this.sqlSessionFactory); scanner.setSqlSessionTemplate(this.sqlSessionTemplate); scanner.setSqlSessionFactoryBeanName(this.sqlSessionFactoryBeanName); scanner.setSqlSessionTemplateBeanName(this.sqlSessionTemplateBeanName); scanner.setResourceLoader(this.applicationContext); scanner.setBeanNameGenerator(this.nameGenerator); scanner.registerFilters(); scanner.scan(StringUtils.tokenizeToStringArray(this.basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS));&#125; 最终, 所有的Mapper对应的接口生成的对象其实都是MapperFactoryBean。 6. registerBeanPostProcessors注册所有的BeanPostProcessor。注册顺序和之后的执行顺序: 实现了PriorityOrdered的BeanPostProcessor 实现了Ordered的BeanPostProcessor 其他nonOrdered的BeanPostProcessor 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768public static void registerBeanPostProcessors( ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext) &#123; String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, true, false); // Register BeanPostProcessorChecker that logs an info message when // a bean is created during BeanPostProcessor instantiation, i.e. when // a bean is not eligible for getting processed by all BeanPostProcessors. int beanProcessorTargetCount = beanFactory.getBeanPostProcessorCount() + 1 + postProcessorNames.length; beanFactory.addBeanPostProcessor(new BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount)); // Separate between BeanPostProcessors that implement PriorityOrdered, // Ordered, and the rest. List&lt;BeanPostProcessor&gt; priorityOrderedPostProcessors = new ArrayList&lt;BeanPostProcessor&gt;(); List&lt;BeanPostProcessor&gt; internalPostProcessors = new ArrayList&lt;BeanPostProcessor&gt;(); List&lt;String&gt; orderedPostProcessorNames = new ArrayList&lt;String&gt;(); List&lt;String&gt; nonOrderedPostProcessorNames = new ArrayList&lt;String&gt;(); for (String ppName : postProcessorNames) &#123; if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123; BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class); priorityOrderedPostProcessors.add(pp); if (pp instanceof MergedBeanDefinitionPostProcessor) &#123; internalPostProcessors.add(pp); &#125; &#125; else if (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123; orderedPostProcessorNames.add(ppName); &#125; else &#123; nonOrderedPostProcessorNames.add(ppName); &#125; &#125; // First, register the BeanPostProcessors that implement PriorityOrdered. sortPostProcessors(priorityOrderedPostProcessors, beanFactory); registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors); // Next, register the BeanPostProcessors that implement Ordered. List&lt;BeanPostProcessor&gt; orderedPostProcessors = new ArrayList&lt;BeanPostProcessor&gt;(); for (String ppName : orderedPostProcessorNames) &#123; BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class); orderedPostProcessors.add(pp); if (pp instanceof MergedBeanDefinitionPostProcessor) &#123; internalPostProcessors.add(pp); &#125; &#125; sortPostProcessors(orderedPostProcessors, beanFactory); registerBeanPostProcessors(beanFactory, orderedPostProcessors); // Now, register all regular BeanPostProcessors. List&lt;BeanPostProcessor&gt; nonOrderedPostProcessors = new ArrayList&lt;BeanPostProcessor&gt;(); for (String ppName : nonOrderedPostProcessorNames) &#123; BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class); nonOrderedPostProcessors.add(pp); if (pp instanceof MergedBeanDefinitionPostProcessor) &#123; internalPostProcessors.add(pp); &#125; &#125; registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors); // Finally, re-register all internal BeanPostProcessors. sortPostProcessors(internalPostProcessors, beanFactory); registerBeanPostProcessors(beanFactory, internalPostProcessors); // Re-register post-processor for detecting inner beans as ApplicationListeners, // moving it to the end of the processor chain (for picking up proxies etc). beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(applicationContext)); &#125; 这里只是进行注册, 之后的BeanPostProcessor的执行是在每个bean进行注册的时候做的。 7. initMessageSource国际化相关信息。 8. initApplicationEventMulticaster9. onRefresh留给子类扩展。 10. registerListeners注册ApplicationListener。1234567891011121314151617181920212223242526/** * Add beans that implement ApplicationListener as listeners. * Doesn't affect other listeners, which can be added without being beans. */protected void registerListeners() &#123; // Register statically specified listeners first. for (ApplicationListener&lt;?&gt; listener : getApplicationListeners()) &#123; getApplicationEventMulticaster().addApplicationListener(listener); &#125; // Do not initialize FactoryBeans here: We need to leave all regular beans // uninitialized to let post-processors apply to them! String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false); for (String listenerBeanName : listenerBeanNames) &#123; getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName); &#125; // Publish early application events now that we finally have a multicaster... Set&lt;ApplicationEvent&gt; earlyEventsToProcess = this.earlyApplicationEvents; this.earlyApplicationEvents = null; if (earlyEventsToProcess != null) &#123; for (ApplicationEvent earlyEvent : earlyEventsToProcess) &#123; getApplicationEventMulticaster().multicastEvent(earlyEvent); &#125; &#125;&#125; 11. finishBeanFactoryInitializationbean加载最核心的地方 此处加载所有non-lazy-init的实例。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165/** * Return an instance, which may be shared or independent, of the specified bean. * @param name the name of the bean to retrieve * @param requiredType the required type of the bean to retrieve * @param args arguments to use when creating a bean instance using explicit arguments * (only applied when creating a new instance as opposed to retrieving an existing one) * @param typeCheckOnly whether the instance is obtained for a type check, * not for actual use * @return an instance of the bean * @throws BeansException if the bean could not be created */ @SuppressWarnings("unchecked") protected &lt;T&gt; T doGetBean( final String name, final Class&lt;T&gt; requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException &#123; final String beanName = transformedBeanName(name); Object bean; // Eagerly check singleton cache for manually registered singletons. Object sharedInstance = getSingleton(beanName); if (sharedInstance != null &amp;&amp; args == null) &#123; if (logger.isDebugEnabled()) &#123; if (isSingletonCurrentlyInCreation(beanName)) &#123; logger.debug("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference"); &#125; else &#123; logger.debug("Returning cached instance of singleton bean '" + beanName + "'"); &#125; &#125; bean = getObjectForBeanInstance(sharedInstance, name, beanName, null); &#125; else &#123; // Fail if we're already creating this bean instance: // We're assumably within a circular reference. if (isPrototypeCurrentlyInCreation(beanName)) &#123; throw new BeanCurrentlyInCreationException(beanName); &#125; // Check if bean definition exists in this factory. BeanFactory parentBeanFactory = getParentBeanFactory(); if (parentBeanFactory != null &amp;&amp; !containsBeanDefinition(beanName)) &#123; // Not found -&gt; check parent. String nameToLookup = originalBeanName(name); if (args != null) &#123; // Delegation to parent with explicit args. return (T) parentBeanFactory.getBean(nameToLookup, args); &#125; else &#123; // No args -&gt; delegate to standard getBean method. return parentBeanFactory.getBean(nameToLookup, requiredType); &#125; &#125; if (!typeCheckOnly) &#123; markBeanAsCreated(beanName); &#125; try &#123; final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName); checkMergedBeanDefinition(mbd, beanName, args); // Guarantee initialization of beans that the current bean depends on. String[] dependsOn = mbd.getDependsOn(); if (dependsOn != null) &#123; for (String dep : dependsOn) &#123; if (isDependent(beanName, dep)) &#123; throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'"); &#125; registerDependentBean(dep, beanName); try &#123; getBean(dep); &#125; catch (NoSuchBeanDefinitionException ex) &#123; throw new BeanCreationException(mbd.getResourceDescription(), beanName, "'" + beanName + "' depends on missing bean '" + dep + "'", ex); &#125; &#125; &#125; // Create bean instance. if (mbd.isSingleton()) &#123; sharedInstance = getSingleton(beanName, new ObjectFactory&lt;Object&gt;() &#123; @Override public Object getObject() throws BeansException &#123; try &#123; return createBean(beanName, mbd, args); &#125; catch (BeansException ex) &#123; // Explicitly remove instance from singleton cache: It might have been put there // eagerly by the creation process, to allow for circular reference resolution. // Also remove any beans that received a temporary reference to the bean. destroySingleton(beanName); throw ex; &#125; &#125; &#125;); bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd); &#125; else if (mbd.isPrototype()) &#123; // It's a prototype -&gt; create a new instance. Object prototypeInstance = null; try &#123; beforePrototypeCreation(beanName); prototypeInstance = createBean(beanName, mbd, args); &#125; finally &#123; afterPrototypeCreation(beanName); &#125; bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd); &#125; else &#123; String scopeName = mbd.getScope(); final Scope scope = this.scopes.get(scopeName); if (scope == null) &#123; throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'"); &#125; try &#123; Object scopedInstance = scope.get(beanName, new ObjectFactory&lt;Object&gt;() &#123; @Override public Object getObject() throws BeansException &#123; beforePrototypeCreation(beanName); try &#123; return createBean(beanName, mbd, args); &#125; finally &#123; afterPrototypeCreation(beanName); &#125; &#125; &#125;); bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd); &#125; catch (IllegalStateException ex) &#123; throw new BeanCreationException(beanName, "Scope '" + scopeName + "' is not active for the current thread; consider " + "defining a scoped proxy for this bean if you intend to refer to it from a singleton", ex); &#125; &#125; &#125; catch (BeansException ex) &#123; cleanupAfterBeanCreationFailure(beanName); throw ex; &#125; &#125; // Check if required type matches the type of the actual bean instance. if (requiredType != null &amp;&amp; bean != null &amp;&amp; !requiredType.isInstance(bean)) &#123; try &#123; return getTypeConverter().convertIfNecessary(bean, requiredType); &#125; catch (TypeMismatchException ex) &#123; if (logger.isDebugEnabled()) &#123; logger.debug("Failed to convert bean '" + name + "' to required type '" + ClassUtils.getQualifiedName(requiredType) + "'", ex); &#125; throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass()); &#125; &#125; return (T) bean; 处理depends-on 这里的处理过程是将需要实例化的bean的depends-on的bean先实例化，通过depends-on可以用来控制bean的加载顺序。 实例化singleton bean 处理生成bean。其中populateBean是用来处理依赖bean, initializeBean是用来进行bean的初始化。 org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116/** * Actually create the specified bean. Pre-creation processing has already happened * at this point, e.g. checking &#123;@code postProcessBeforeInstantiation&#125; callbacks. * &lt;p&gt;Differentiates between default bean instantiation, use of a * factory method, and autowiring a constructor. * @param beanName the name of the bean * @param mbd the merged bean definition for the bean * @param args explicit arguments to use for constructor or factory method invocation * @return a new instance of the bean * @throws BeanCreationException if the bean could not be created * @see #instantiateBean * @see #instantiateUsingFactoryMethod * @see #autowireConstructor */protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args) throws BeanCreationException &#123; // Instantiate the bean. BeanWrapper instanceWrapper = null; if (mbd.isSingleton()) &#123; instanceWrapper = this.factoryBeanInstanceCache.remove(beanName); &#125; if (instanceWrapper == null) &#123; instanceWrapper = createBeanInstance(beanName, mbd, args); &#125; final Object bean = (instanceWrapper != null ? instanceWrapper.getWrappedInstance() : null); Class&lt;?&gt; beanType = (instanceWrapper != null ? instanceWrapper.getWrappedClass() : null); mbd.resolvedTargetType = beanType; // Allow post-processors to modify the merged bean definition. synchronized (mbd.postProcessingLock) &#123; if (!mbd.postProcessed) &#123; try &#123; applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName); &#125; catch (Throwable ex) &#123; throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Post-processing of merged bean definition failed", ex); &#125; mbd.postProcessed = true; &#125; &#125; // Eagerly cache singletons to be able to resolve circular references // even when triggered by lifecycle interfaces like BeanFactoryAware. boolean earlySingletonExposure = (mbd.isSingleton() &amp;&amp; this.allowCircularReferences &amp;&amp; isSingletonCurrentlyInCreation(beanName)); if (earlySingletonExposure) &#123; if (logger.isDebugEnabled()) &#123; logger.debug("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references"); &#125; addSingletonFactory(beanName, new ObjectFactory&lt;Object&gt;() &#123; @Override public Object getObject() throws BeansException &#123; return getEarlyBeanReference(beanName, mbd, bean); &#125; &#125;); &#125; // Initialize the bean instance. Object exposedObject = bean; try &#123; populateBean(beanName, mbd, instanceWrapper); if (exposedObject != null) &#123; exposedObject = initializeBean(beanName, exposedObject, mbd); &#125; &#125; catch (Throwable ex) &#123; if (ex instanceof BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123; throw (BeanCreationException) ex; &#125; else &#123; throw new BeanCreationException( mbd.getResourceDescription(), beanName, "Initialization of bean failed", ex); &#125; &#125; if (earlySingletonExposure) &#123; Object earlySingletonReference = getSingleton(beanName, false); if (earlySingletonReference != null) &#123; if (exposedObject == bean) &#123; exposedObject = earlySingletonReference; &#125; else if (!this.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123; String[] dependentBeans = getDependentBeans(beanName); Set&lt;String&gt; actualDependentBeans = new LinkedHashSet&lt;String&gt;(dependentBeans.length); for (String dependentBean : dependentBeans) &#123; if (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123; actualDependentBeans.add(dependentBean); &#125; &#125; if (!actualDependentBeans.isEmpty()) &#123; throw new BeanCurrentlyInCreationException(beanName, "Bean with name '" + beanName + "' has been injected into other beans [" + StringUtils.collectionToCommaDelimitedString(actualDependentBeans) + "] in its raw version as part of a circular reference, but has eventually been " + "wrapped. This means that said other beans do not use the final version of the " + "bean. This is often the result of over-eager type matching - consider using " + "'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example."); &#125; &#125; &#125; &#125; // Register bean as disposable. try &#123; registerDisposableBeanIfNecessary(beanName, bean, mbd); &#125; catch (BeanDefinitionValidationException ex) &#123; throw new BeanCreationException( mbd.getResourceDescription(), beanName, "Invalid destruction signature", ex); &#125; return exposedObject;&#125; 初始化bean 调用bean的各种init方法, 调用BeanPostProcessor的方法, 此处需要注意执行顺序。 bean的初始化方法执行顺序 invokeAwareMethods 实现了Aware的类, 设置Aware的信息 applyBeanPostProcessorsBeforeInitialization 让BeanPostProcessor预处理 invokeInitMethods 实现了InitializingBean, 设置afterPropertiesSet invokeCustomInitMethod 调用设置的initMethod。 applyBeanPostProcessorsAfterInitialization 让BeanPostProcessor后处理 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/** * Initialize the given bean instance, applying factory callbacks * as well as init methods and bean post processors. * &lt;p&gt;Called from &#123;@link #createBean&#125; for traditionally defined beans, * and from &#123;@link #initializeBean&#125; for existing bean instances. * @param beanName the bean name in the factory (for debugging purposes) * @param bean the new bean instance we may need to initialize * @param mbd the bean definition that the bean was created with * (can also be &#123;@code null&#125;, if given an existing bean instance) * @return the initialized bean instance (potentially wrapped) * @see BeanNameAware * @see BeanClassLoaderAware * @see BeanFactoryAware * @see #applyBeanPostProcessorsBeforeInitialization * @see #invokeInitMethods * @see #applyBeanPostProcessorsAfterInitialization */protected Object initializeBean(final String beanName, final Object bean, RootBeanDefinition mbd) &#123; if (System.getSecurityManager() != null) &#123; AccessController.doPrivileged(new PrivilegedAction&lt;Object&gt;() &#123; @Override public Object run() &#123; invokeAwareMethods(beanName, bean); return null; &#125; &#125;, getAccessControlContext()); &#125; else &#123; invokeAwareMethods(beanName, bean); &#125; Object wrappedBean = bean; if (mbd == null || !mbd.isSynthetic()) &#123; wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName); &#125; try &#123; invokeInitMethods(beanName, wrappedBean, mbd); &#125; catch (Throwable ex) &#123; throw new BeanCreationException( (mbd != null ? mbd.getResourceDescription() : null), beanName, "Invocation of init method failed", ex); &#125; if (mbd == null || !mbd.isSynthetic()) &#123; wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName); &#125; return wrappedBean;&#125; spring是允许循环依赖的, 如果设置了spring允许循环依赖, 出现循环依赖时, spring会预先实例化依赖, 让当前初始化的bean拥有一个依赖的引用, 在当前bean初始化完成之后,会将这个只实例化未初始化的依赖进行初始化。 12. finishRefresh初始化LifeCycle类Processor, 发布ApplicationContext初始化完成的Event。123456789101112131415161718/** * Finish the refresh of this context, invoking the LifecycleProcessor's * onRefresh() method and publishing the * &#123;@link org.springframework.context.event.ContextRefreshedEvent&#125;. */protected void finishRefresh() &#123; // Initialize lifecycle processor for this context. initLifecycleProcessor(); // Propagate refresh to lifecycle processor first. getLifecycleProcessor().onRefresh(); // Publish the final event. publishEvent(new ContextRefreshedEvent(this)); // Participate in LiveBeansView MBean, if active. LiveBeansView.registerApplicationContext(this);&#125;]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>spring启动</tag>
        <tag>ApplicationContext</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring事务]]></title>
    <url>%2F2018%2F12%2F18%2Fspring%E4%BA%8B%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[transactional transaction propagation behaviors REQUIRED 如果当前存在一个事务，则直接使用这个事务，如果没有，就重新创建一个事务 SUPPORTS 如果当前存在一个事务，则直接加入这个事务，如果没有就以non-transactionally继续执行 MANDATORY 检查现在是否有事务存在，如果没有，throw an exception REQUIRES_NEW 总是会新开一个事务，如果当前已经存在了一个事务，则会把当前的事务挂起 NOT_SUPPORTED 不支持事务，如果当前已经存在事务，会将当前事务挂起 NEVER 不支持事务，如果当前已经存在事务，throw an exception NESTED 如果当前存在事务，则增加一个嵌套事务，如果不存在，则新开一个事务 transaction isolation level DEFAULT Use the default isolation level of the underlying datastore. READ_UNCOMMITTED dirty reads, non-repeatable reads and phantom reads can occur. READ_COMMITTED dirty reads are prevented; non-repeatable reads and phantom reads can occur. REPEATABLE_READ dirty reads and non-repeatable reads are prevented; phantom reads can occur. SERIALIZABLE dirty reads, non-repeatable reads and phantom reads are prevented. TransactionManagementConfigurationSelector 可以看出@Transactional注解生效的两种方式，一种是使用代理，一种是使用AspectJ。 ==可以通过以下注解指定实现方式== 1@EnableTransactionManagement(mode = AdviceMode.XXX) 不需要额外的配置，使用@EnableTransactionManagement注解，并且声明mode类型为AdviceMode.AspectJ，即可在同级调用开启事务。 Spring transactionglobal transaction and local transactionglobal: 可操作多源，如db和mq； local: 只能操作一种数据源。 declarative and programmaticdeclarative: 声明式事务(推荐)programmatic: 编程式事务 PlatformTransactionManagerSpring 的核心事务策略概念接口。 123456789public interface PlatformTransactionManager &#123; //getTransaction会返回一个事务，(依赖于事务传播行为，可能会新建一个事务或抛异常等等) TransactionStatus getTransaction( TransactionDefinition definition) throws TransactionException; void commit(TransactionStatus status) throws TransactionException; void rollback(TransactionStatus status) throws TransactionException;&#125; 123456789101112131415public interface TransactionStatus extends SavepointManager &#123; boolean isNewTransaction(); //如果创建了一个nested transaction, 则需要对当前的事务保存一个savepoint boolean hasSavepoint(); void setRollbackOnly(); boolean isRollbackOnly(); void flush(); boolean isCompleted();&#125; org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy是DataSource的一个代理，属于lowest level ==The Spring Framework does not support propagation of transaction contexts across remote calls,== 回滚roll back is automatic only on unchecked exceptions mybatis &amp; spring一个使用 MyBatis-Spring 的主要原因是它允许 MyBatis 参与到 Spring 的事务管理中。而 不是给 MyBatis 创建一个新的特定的事务管理器,MyBatis-Spring 利用了存在于 Spring 中的 DataSourceTransactionManager。==在事务处理期间,一个单独的 SqlSession 对象将会被创建 和使用。当事务完成时,这个 session 会以合适的方式提交或回滚。== spring声明式事务的实现AOP和xml或注解结合，使用TransactionInterceptor和PlatformTransactionManager的实现结合来产生一个AOP代理去驱动事务。 使用spring aop xml配置事务。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;!-- from the file 'context.xml' --&gt;&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"&gt; &lt;!-- this is the service object that we want to make transactional --&gt; &lt;bean id="fooService" class="x.y.service.DefaultFooService"/&gt; &lt;!-- the transactional advice (what 'happens'; see the &lt;aop:advisor/&gt; bean below) --&gt; &lt;tx:advice id="txAdvice" transaction-manager="txManager"&gt; &lt;!-- the transactional semantics... --&gt; &lt;tx:attributes&gt; &lt;!-- all methods starting with 'get' are read-only --&gt; &lt;tx:method name="get*" read-only="true"/&gt; &lt;!-- other methods use the default transaction settings (see below) --&gt; &lt;tx:method name="*"/&gt; &lt;/tx:attributes&gt; &lt;/tx:advice&gt; &lt;!-- ensure that the above transactional advice runs for any execution of an operation defined by the FooService interface --&gt; &lt;aop:config&gt; &lt;aop:pointcut id="fooServiceOperation" expression="execution(* x.y.service.FooService.*(..))"/&gt; &lt;aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceOperation"/&gt; &lt;/aop:config&gt; &lt;!-- don't forget the DataSource --&gt; &lt;bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"&gt; &lt;property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/&gt; &lt;property name="url" value="jdbc:oracle:thin:@rj-t42:1521:elvis"/&gt; &lt;property name="username" value="scott"/&gt; &lt;property name="password" value="tiger"/&gt; &lt;/bean&gt; &lt;!-- similarly, don't forget the PlatformTransactionManager --&gt; &lt;bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;/bean&gt; &lt;!-- other &lt;bean/&gt; definitions here --&gt;&lt;/beans&gt; The configuration shown earlier is used to create a transactional proxy around the object that is created from the fooService bean definition. 所有的这些配置都是用来创建围绕fooService bean的一个事务代理。 rollback for默认的配置: spring会默认设置事务为 rollback only，这意味着只有在遇到unchecked Exception的时候才会触发rollback。checked Exception抛出的时候不会触发rollback。设置rollback for可以使checked Exception也触发回滚。当然设置no-rollback-for可以让某些异常不回滚。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"&gt; &lt;aop:config&gt; &lt;aop:pointcut id="defaultServiceOperation" expression="execution(* x.y.service.*Service.*(..))"/&gt; &lt;aop:pointcut id="noTxServiceOperation" expression="execution(* x.y.service.ddl.DefaultDdlManager.*(..))"/&gt; &lt;aop:advisor pointcut-ref="defaultServiceOperation" advice-ref="defaultTxAdvice"/&gt; &lt;aop:advisor pointcut-ref="noTxServiceOperation" advice-ref="noTxAdvice"/&gt; &lt;/aop:config&gt; &lt;!-- this bean will be transactional (see the 'defaultServiceOperation' pointcut) --&gt; &lt;bean id="fooService" class="x.y.service.DefaultFooService"/&gt; &lt;!-- this bean will also be transactional, but with totally different transactional settings --&gt; &lt;bean id="anotherFooService" class="x.y.service.ddl.DefaultDdlManager"/&gt; &lt;tx:advice id="defaultTxAdvice"&gt; &lt;tx:attributes&gt; &lt;tx:method name="get*" read-only="true"/&gt; &lt;tx:method name="*"/&gt; &lt;/tx:attributes&gt; &lt;/tx:advice&gt; &lt;tx:advice id="noTxAdvice"&gt; &lt;tx:attributes&gt; &lt;tx:method name="*" propagation="NEVER"/&gt; &lt;/tx:attributes&gt; &lt;/tx:advice&gt; &lt;!-- other transaction infrastructure beans such as a PlatformTransactionManager omitted... --&gt;&lt;/beans&gt; tx:advice标签tx:method 默认值: The propagation setting is REQUIRED. The isolation level is DEFAULT. The transaction is read-write. The transaction timeout defaults to the default timeout of the underlying transaction system or none if timeouts are not supported. Any RuntimeException triggers rollback, and any checked Exception does not. 使用@Transactional注解注解生效xml配置: 123456789101112131415161718192021222324252627&lt;!-- from the file 'context.xml' --&gt;&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"&gt; &lt;!-- this is the service object that we want to make transactional --&gt; &lt;bean id="fooService" class="x.y.service.DefaultFooService"/&gt; &lt;!-- enable the configuration of transactional behavior based on annotations --&gt; &lt;tx:annotation-driven transaction-manager="txManager"/&gt;&lt;!-- a PlatformTransactionManager is still required --&gt; &lt;bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;!-- (this dependency is defined somewhere else) --&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;/bean&gt; &lt;!-- other &lt;bean/&gt; definitions here --&gt;&lt;/beans&gt; @Transactional注解1234@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)@Retention(RetentionPolicy.RUNTIME)@Inherited@Documented 1.可以看到注解的适用范围是方法和类(包括接口和枚举) 2.作用保留: 运行期也会保留 3.可以被继承(指的是使用该注解的类)，寻找注解里面的annotaion type会向上查找 @Transactional注解实现需要注意:The Spring team recommends that you annotate only concrete classes (and methods of concrete classes) with the @Transactional annotation, as opposed to annotating interfaces. You certainly can place the @Transactional annotation on an interface (or an interface method), but this works only as you would expect it to if you use interface-based proxies. The fact that Java annotations are not inherited from interfaces means that, if you use class-based proxies (proxy-target-class=”true”) or the weaving-based aspect (mode=”aspectj”), the transaction settings are not recognized by the proxying and weaving infrastructure, and the object is not wrapped in a transactional proxy, which would be decidedly bad. spring推荐使用@Transactional在类或者类方法上，而不是接口。因为@AspectJ(class-based)形式不支持在接口上实现事务，并且如果是代理模式，使用CGLIB代理(class-based)的话，也不支持接口上实现事务。JDK的实现方式支持(Interface-based)。 When you use proxies, you should apply the @Transactional annotation only to methods with public visibility. If you do annotate protected, private or package-visible methods with the @Transactional annotation, no error is raised, but the annotated method does not exhibit the configured transactional settings. If you need to annotate non-public methods, consider using AspectJ (described later).当注解使用在方法上的时候，@Transactional注解在默认的情况下(使用proxy)只能作用于public方法，如果需要作用在private或protected方法则需要使用AspectJ。这也就引出了另外一个问题，因为一般来说private方法是self-invocation的。 In proxy mode (which is the default), only external method calls coming in through the proxy are intercepted. This means that self-invocation (in effect, a method within the target object calling another method of the target object) does not lead to an actual transaction at runtime even if the invoked method is marked with @Transactional. Also, the proxy must be fully initialized to provide the expected behavior, so you should not rely on this feature in your initialization code (that is, @PostConstruct). 另一个问题是当出现self-invocation的时候，在proxy mode实现方式下@Transactional注解是不生效的，并且proxy mode实现必须是要求在使用前你的bean已经被完全初始化了。 proxy和AspectJ的实现原理The default mode (proxy) processes annotated beans to be proxied by using Spring’s AOP framework (following proxy semantics, as discussed earlier, applying to method calls coming in through the proxy only). The alternative mode (aspectj) instead weaves the affected classes with Spring’s AspectJ transaction aspect, modifying the target class byte code to apply to any kind of method call. AspectJ weaving requires spring-aspects.jar in the classpath as well as having load-time weaving (or compile-time weaving) enabled. (See Spring configuration for details on how to set up load-time weaving.) 使用proxy的方式的时候，被代理的target进行方法调用的时候会先调用代理的方法，在代理的方法里面再对target方法进行调用。而使用AspectJ的时候，是直接修改了注解声明的类的字节码。AspectJ使用需要spring-aspects.jar和设置compile-time weaving(编译的时候强制使用AspectJ形式，很显然可以想到，因为AspectJ形式修改了类的字节码，类的byte code这是在编译的时候进行的)。 @Transactional优先级别12345678910111213@Transactional(readOnly = true)public class DefaultFooService implements FooService &#123; public Foo getFoo(String fooName) &#123; // do something &#125; // these settings have precedence for this method @Transactional(readOnly = false, propagation = Propagation.REQUIRES_NEW) public void updateFoo(Foo foo) &#123; // do something &#125;&#125; 多个transaction manager12345678public class TransactionalService &#123; @Transactional("order") public void setSomething(String name) &#123; ... &#125; @Transactional("account") public void doSomething() &#123; ... &#125;&#125; 1234567891011&lt;tx:annotation-driven/&gt; &lt;bean id="transactionManager1" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; ... &lt;qualifier value="order"/&gt; &lt;/bean&gt; &lt;bean id="transactionManager2" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; ... &lt;qualifier value="account"/&gt; &lt;/bean&gt; 当未指定使用哪个transaction manager的时候，默认的manager将会被使用。 By default, a participating transaction joins the characteristics of the outer scope, silently ignoring the local isolation level, timeout value, or read-only flag (if any). Consider switching the validateExistingTransactions flag to true on your transaction manager if you want isolation level declarations to be rejected when participating in an existing transaction with a different isolation level. This non-lenient mode also rejects read-only mismatches (that is, an inner read-write transaction that tries to participate in a read-only outer scope). 对于”PROPAGATION_REQUIRED”传播级别，默认的时候，outer事务的配置会覆盖inner的事务配置，也就是说开启新的事务的时候会使用existing transaction的配置。当需要使用inner transaction的配置时，需要将transaction manager的setValidateExistingTransaction设置true。 logical transaction and physical transaction PROPAGATION_REQUIRED 强制会有一个physical transaction，当一个带事务的方法被调用时，会生成一个logical transaction，这些logical transaction的配置都不会生效，而是使用outer transaction定义的isolation level, timeout value, or read-only flag。但是在出现异常回滚的时候，logical transaction如果需要回滚，会setRollbackOnly，此时不管physical transaction的rollback-for等等，只要transaction被set rollback only(the only possible outcome of the transaction may be a rollback)，physical transaction也会被回滚。 PROPAGATION_REQUIRES_NEW 会创建新的physical transaction，并且在这个隔离级别下，transaction的配置不会继承outer transaction，可以声明自己的 isolation level, timeout, and read-only。并且inner transaction的回滚也不会影响outer transaction。 PROPAGATION_NESTED 多个savepoint，一个physical transaction。如果嵌套的transaction中有一个inner transaction回滚了，只是当前的savepoint需要回滚，不会影响整个physical transaction。 ==通过TransactionStatus判断的== 1234567891011121314151617public interface TransactionStatus extends SavepointManager, Flushable &#123; boolean isNewTransaction(); boolean hasSavepoint(); void setRollbackOnly(); boolean isRollbackOnly(); @Override void flush(); boolean isCompleted();&#125; transactionInterceptortransactionInterceptor的继承以及组合关系。可以看到transactionAspectSupport包含了transactionInfo内部类，而transactionInfo又组合了transactionStatus。 TransactionProxyFactoryBean transaction 是否开启1logger.info("isActualTransactionActive:&#123;&#125;, isSynchronizationActive:&#123;&#125;.", TransactionSynchronizationManager.isActualTransactionActive(), TransactionSynchronizationManager.isSynchronizationActive()); commit12 rollback12]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>事务</tag>
        <tag>Transactional</tag>
        <tag>transaction</tag>
      </tags>
  </entry>
</search>
